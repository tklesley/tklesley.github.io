[{"D:\\Portfolio Website\\tklesley.github.io\\portfolio\\src\\index.js":"1","D:\\Portfolio Website\\tklesley.github.io\\portfolio\\src\\reportWebVitals.js":"2","D:\\Portfolio Website\\tklesley.github.io\\portfolio\\src\\App.js":"3"},{"size":535,"mtime":1673218942836,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1673218945648,"results":"6","hashOfConfig":"5"},{"size":11130,"mtime":1673220060076,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16epf50",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},"D:\\Portfolio Website\\tklesley.github.io\\portfolio\\src\\index.js",[],[],"D:\\Portfolio Website\\tklesley.github.io\\portfolio\\src\\reportWebVitals.js",[],[],"D:\\Portfolio Website\\tklesley.github.io\\portfolio\\src\\App.js",["18","19","20","21","22","23","24","25"],[],"import logo from './logo.svg';\nimport './App.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './App.css';\n\n\n// ------------ Map Test --------------\n\nconst room1 = {\n  roomID: \"room1\",\n  roomName: \"Lower Left\",\n  north: \"room2\",\n  east: \"room4\",\n  south: null,\n  west: null,\n  roomImage: null,\n  description: `You find yourself in a room.  There is a door to your right and a door in front of you.  Neither one are locked.`,\n  firstEntry: true,\n  firsfEntryDescription: \"\",\n  visible: true,\n  northKey: null,\n  eastKey: null,\n  southKey: null,\n  westKey: null,\n}\n\nconst room2 = {\n  roomID: \"room2\",\n  roomName: \"Upper Left\",\n  north: null,\n  east: \"room3\",\n  south: \"room1\",\n  west: null,\n  roomImage: null,\n  description: `You find yourself in a room.  There is a door to your right and a door behind you.  Neither one are locked.`,\n  firstEntry: true,\n  firsfEntryDescription: \"\",\n  visible: true,\n  northKey: null,\n  eastKey: null,\n  southKey: null,\n  westKey: null,\n}\n\nconst room3 = {\n  roomID: \"room3\",\n  roomName: \"Upper Right\",\n  north: null,\n  east: null,\n  south: \"room4\",\n  west: \"room2\",\n  roomImage: null,\n  description: `You find yourself in a room.  There is a door to your left and a door behind you.  Neither one are locked.`,\n  firstEntry: true,\n  firsfEntryDescription: \"\",\n  visible: true,\n  northKey: null,\n  eastKey: null,\n  southKey: null,\n  westKey: null,\n}\n\nconst room4 = {\n  roomID: \"room4\",\n  roomName: \"Lower Right\",\n  north: \"room3\",\n  east: null,\n  south: null,\n  west: \"room1\",\n  roomImage: null,\n  description: `You find yourself in a room.  There is a door to your left and a door in front of you.  Neither one are locked.`,\n  firstEntry: true,\n  firsfEntryDescription: \"\",\n  visible: true,\n  northKey: null,\n  eastKey: null,\n  southKey: null,\n  westKey: null,\n}\n\nconst map1 = {\n  room1: room1,\n  room2: room2,\n  room3: room3,\n  room4: room4\n}\n\nfunction handleMove(direction) {\n  let cridMove = this.state.currentRoomID;\n  if (direction === \"north\") {\n    if (cridMove.north === null) {\n      console.log(`Cannot move ${direction}.`);\n      return;\n    } else {\n      console.log(`Moving ${direction}`);\n      this.setState({ currentRoomID: eval(cridMove.north) }, () => {\n        cridMove = this.state.currentRoomID;\n        console.log(cridMove.roomID);\n        const currentRoomName = cridMove.roomName;\n        const currentRoomDescription = cridMove.description;\n        this.setState({\n        roomName: currentRoomName,\n        roomDescription: currentRoomDescription,\n        });\n      })\n      return;\n    };\n  } else if (direction === \"south\") {\n    if (cridMove.south === null) {\n      console.log(`Cannot move ${direction}.`);\n      return;\n    } else {\n      console.log(`Moving ${direction}`);\n      this.setState({ currentRoomID: eval(cridMove.south) }, () => {\n        cridMove = this.state.currentRoomID;\n        console.log(cridMove.roomID);\n        const currentRoomName = cridMove.roomName;\n        const currentRoomDescription = cridMove.description;\n        this.setState({\n        roomName: currentRoomName,\n        roomDescription: currentRoomDescription,\n        });\n      })\n      return;\n    };\n  } else if (direction === \"east\") {\n    if (cridMove.east === null) {\n      console.log(`Cannot move ${direction}.`);\n      return;\n    } else {\n      console.log(`Moving ${direction}`);\n      this.setState({ currentRoomID: eval(cridMove.east) }, () => {\n        cridMove = this.state.currentRoomID;\n        console.log(cridMove.roomID);\n        const currentRoomName = cridMove.roomName;\n        const currentRoomDescription = cridMove.description;\n        this.setState({\n        roomName: currentRoomName,\n        roomDescription: currentRoomDescription,\n        });\n      })\n      return;\n    };\n  } else if (direction === \"west\") {\n    if (cridMove.west === null) {\n      console.log(`Cannot move ${direction}.`);\n      return;\n    } else {\n      console.log(`Moving ${direction}`);\n      this.setState({ currentRoomID: eval(cridMove.west) }, () => {\n        cridMove = this.state.currentRoomID;\n        console.log(cridMove.roomID);\n        const currentRoomName = cridMove.roomName;\n        const currentRoomDescription = cridMove.description;\n        this.setState({\n        roomName: currentRoomName,\n        roomDescription: currentRoomDescription,\n        });\n      })\n      return;\n    };\n  }\n};\n\n/*\nfunction setRoomState () {\n  console.log(\"Changing room state\");\n  const currentRoom = this.state.currentRoomID;\n  console.log(\"acquired current room ID\")\n  const currentRoomName = currentRoom.roomName;\n  const currentRoomDescription = currentRoom.description;\n  this.setState({\n    roomName: currentRoomName,\n    roomDescription: currentRoomDescription,\n  });\n};\n*/\n\n// --------- App -----------------\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      bg: \"bg-dark\",\n      bgButton: \"button-dark\",\n      settings: false,\n      blayout: \"move\",\n      view: \"roomDesc\",\n      currentRoomID: room1,\n      roomName: room1.roomName,\n      roomDescription: room1.description,\n    };\n    this.handleMoveApp = handleMove.bind(this);\n    /*   \n     if (this.state.bg === \"bg-dark\") {\n       this.setState({ bgButton: \"button-dark\" })\n     } else if (this.state.bg === \"bg-classic\") {\n       this.setState({ bgButton: \"button-classic\"})\n     } else {\n       this.setState({ bgButton: \"button-light\"})\n     };\n    */\n  };\n\n  render() {\n    return (\n      <div className={`centering ${this.state.bg}`}>\n        <div className={\"page-layout \" + this.state.bg}>\n          <Heading />\n          <Display\n            bg={this.state.bg}\n            view={this.state.view}\n            crid={this.state.currentRoomID}\n            roomName={this.state.roomName}\n            roomDescription={this.state.roomDescription}\n          />\n          <ScrollMenu />\n          <ButtonLayout\n            handleMoveChild={(direction) => this.handleMoveApp(direction)}\n            blayout={this.state.blayout}\n            bgButton={this.state.bgButton}\n          />\n          <Footer />\n        </div>\n      </div>\n    )\n  }\n};\n\n// --------- Main Page Layout -----------\n\nclass Heading extends App {\n  constructor(props) {\n    super(props);\n  };\n\n  render() {\n    return (\n      <div className=\"heading\">\n        Heading\n      </div>\n    );\n  };\n};\n\nclass Display extends App {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  };\n  render() {\n    if (this.props.view === \"map\") {\n      return (\n        <div className=\"display-container\">\n          <Map />\n        </div>\n      );\n    } else if (this.props.view === \"roomDesc\") {\n      return (\n        <div className=\"display-container\">\n          <AreaDescription\n            bg={this.props.bg}\n            roomName={this.props.roomName}\n            roomDescription={this.props.roomDescription}\n            />\n        </div>\n      );\n    }\n    else {\n      return (\n        <div className=\"display-container\">\n          Display\n        </div>\n      );\n    };\n  };\n};\n\n\nclass ScrollMenu extends App {\n\n  render() {\n    return (\n      <div className=\"scrolling-menu-container\">\n        Menu\n      </div>\n    );\n  };\n};\n\n\nclass ButtonLayout extends App {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    };\n  };\n\n  render() {\n    if (this.props.blayout === \"default\") {\n      return (\n        <div className=\"button-container\">\n          <button className={`main-button ${this.props.bgButton}`} id=\"button1\">Back</button>\n          <button className={`main-button ${this.props.bgButton}`} id=\"button2\">Up</button>\n          <button className={`main-button ${this.props.bgButton}`} id=\"button3\">Select</button>\n          <button className={`main-button ${this.props.bgButton}`} id=\"button4\">Left</button>\n          <button className={`main-button ${this.props.bgButton}`} id=\"button5\">Down</button>\n          <button className={`main-button ${this.props.bgButton}`} id=\"button6\">Right</button>\n        </div>\n      )\n    } else if (this.props.blayout === \"move\") {\n      return (\n        <div className=\"button-container\">\n          <button className={`main-button ${this.props.bgButton}`} id=\"button1\">Back</button>\n          <button className={`main-button ${this.props.bgButton}`} id=\"button2\" onClick={() => this.props.handleMoveChild(\"north\")}>Up</button>\n          <button className={`main-button ${this.props.bgButton}`} id=\"button3\">Select</button>\n          <button className={`main-button ${this.props.bgButton}`} id=\"button4\" onClick={() => this.props.handleMoveChild(\"west\")}>Left</button>\n          <button className={`main-button ${this.props.bgButton}`} id=\"button5\" onClick={() => this.props.handleMoveChild(\"south\")}>Down</button>\n          <button className={`main-button ${this.props.bgButton}`} id=\"button6\" onClick={() => this.props.handleMoveChild(\"east\")}>Right</button>\n        </div >\n      )\n    } else {\n      return (\n        <div className=\"button-container\">\n          <button className={`main-button ${this.props.bgButton}`} id=\"button1\">1</button>\n          <button className={`main-button ${this.props.bgButton}`} id=\"button2\">2</button>\n          <button className={`main-button ${this.props.bgButton}`} id=\"button3\">3</button>\n          <button className={`main-button ${this.props.bgButton}`} id=\"button4\">4</button>\n          <button className={`main-button ${this.props.bgButton}`} id=\"button5\">5</button>\n          <button className={`main-button ${this.props.bgButton}`} id=\"button6\">6</button>\n        </div>\n      )\n    }\n  };\n};\n\nclass Footer extends App {\n  constructor(props) {\n    super(props);\n  };\n\n  render() {\n    return (\n      <div className=\"footer\">\n        Footer\n      </div>\n    );\n  };\n};\n\n\n// ------------ Display Sections ------------\n\nclass Map extends App {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    };\n  };\n\n  render() {\n\n    return (\n      <div className='map'>\n        <div className=\"map-title\">\n          `${this.props.roomName}`\n        </div>\n        Map\n      </div>\n    );\n  };\n};\n\nclass AreaDescription extends Display {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  };\n\n  render() {\n    return (\n      <div className='area'>\n        <div className={`room-title ${this.props.bg}`}>{`${this.props.roomName}`}</div>\n        <div className=\"room-image\">Room Image</div>\n        <div className=\"room-description\">{`${this.props.roomDescription}`}</div>\n      </div >\n    );\n  };\n};\n\n// ------------ Items -------------\n\n/*\nclass Room extends Map {\n  constructor(props) {\n    super(props);\n    this.state = {\n      roomID: null,\n      north: null,\n      east: null,\n      south: null,\n      west: null,\n      roomImage: null,\n      description: \"\",\n      firstEntry: true,\n      firsfEntryDescription: \"\",\n      visible: true,\n      northKey: null,\n      eastKey: null,\n      southKey: null,\n      westKey: null,\n    }\n  }; \n}\n*/\n\n\n// ------------ Render ----------------\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n)\n\nexport default App;\n",{"ruleId":"26","severity":1,"message":"27","line":1,"column":8,"nodeType":"28","messageId":"29","endLine":1,"endColumn":12},{"ruleId":"26","severity":1,"message":"30","line":83,"column":7,"nodeType":"28","messageId":"29","endLine":83,"endColumn":11},{"ruleId":"31","severity":1,"message":"32","line":98,"column":38,"nodeType":"33","messageId":"34","endLine":98,"endColumn":42},{"ruleId":"31","severity":1,"message":"32","line":116,"column":38,"nodeType":"33","messageId":"34","endLine":116,"endColumn":42},{"ruleId":"31","severity":1,"message":"32","line":134,"column":38,"nodeType":"33","messageId":"34","endLine":134,"endColumn":42},{"ruleId":"31","severity":1,"message":"32","line":152,"column":38,"nodeType":"33","messageId":"34","endLine":152,"endColumn":42},{"ruleId":"35","severity":1,"message":"36","line":236,"column":3,"nodeType":"37","messageId":"38","endLine":238,"endColumn":4},{"ruleId":"35","severity":1,"message":"36","line":343,"column":3,"nodeType":"37","messageId":"38","endLine":345,"endColumn":4},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'map1' is assigned a value but never used.","no-eval","eval can be harmful.","CallExpression","unexpected","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor"]